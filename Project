import sys
import ssl

context = ssl._create_unverified_context()

from tkinter import *
from concurrent.futures import ProcessPoolExecutor

from urllib.request import Request, urlopen
from urllib.parse import quote
from bs4 import BeautifulSoup



def deltabook(q):
	result = None

	name = q["name"]
	author = q["author"]

	qName = quote(name).split('%20')
	qName = '+'.join(qName)
	
	resp = urlopen("https://deltabook.ru/search/?q="+qName,context=context)
	respData = resp.read().decode(resp.headers.get_content_charset())

	bsObj = BeautifulSoup(respData)
	results = bsObj.find('div',{'class' : 'searchresult-block book'}).findAll('a',{'class' : 'title'})
	prices = bsObj.find('div',{'class' : 'searchresult-block book'}).findAll('p',{'class' : 'price'})
	for i in range(len(results)):
		if (name in results[i].text):
			result = {'name' : name,'price' : int(prices[i].text.split('.')[0])}
			break
	return result

def parseDeltabook(arr):
	arr2 = []
	for i in arr:
		arr2.append(deltabook(i))
	return arr2

	
def biblio_globus(q):
	result = None

	name = q["name"]
	author = q["author"]
	
	resp = urlopen("http://www.biblio-globus.ru/search/catalog/products?query="+quote(name))
	respData = resp.read().decode(resp.headers.get_content_charset())

	bsObj = BeautifulSoup(respData)
	results = bsObj.findAll('a',{'class' : 'name'})
	prices = bsObj.findAll('div',{'class' : 'title_data price'})
	for i in range(len(results)):
		if (name in results[i].text):
			result = {'name' : name,'price' : int(prices[i].find('span').text.split(',')[0])}
			break
	return result


def parseGlobus(arr):
	arr2 = []
	for i in arr:
		arr2.append(biblio_globus(i))
	return arr2
	
def shopRelod(q):
	result = None

	name = q["name"]
	author = q["author"]

	qName = quote(name).split('%20')
	qName = '%2B'.join(qName)
	
	resp = urlopen("https://shop.relod.ru/product/?sort=STOCK&order=desc&q="+qName,context=context)
	respData = resp.read().decode(resp.headers.get_content_charset())

	bsObj = BeautifulSoup(respData)
	results = bsObj.findAll('a',{'class' : 'bxr-font-color bxr-font-color-hover'})
	prices = bsObj.findAll('span',{'class' : 'bxr-market-current-price bxr-market-format-price'})
	for i in range(len(results)):
		if (name in results[i].text):
			result = {'name' : name,'price' : int(''.join(prices[i].text.split('руб')[0].split(' ')))}
			break
	return result


def parseShopRelod(arr):
	arr2 = []
	for i in arr:
		arr2.append(shopRelod(i))
	return arr2	

def myShop(q):
	result = None

	name = q["name"]
	author = q["author"]

	req = Request('https://my-shop.ru/shop/search/a/sort/z/page/1.html?f14_39=0&f14_16=6&f14_6='+quote(name)+'&t=0&next=1&kp=11&flags=9&menu_catid=0')
	resp = urlopen(req)
	respData = resp.read().decode(resp.headers.get_content_charset())

	bsObj = BeautifulSoup(respData)
	
	results = bsObj.findAll('a',{'title' : name})
	prices = bsObj.findAll('b',{'style' : 'font-size:14px'})
	for i in range(len(results)):
		if not('audio' in results[i].attrs["href"]):
			result = {'name' : name,'price' : int(prices[i].text.split("руб")[0][0:-1])}
			break
	return result


def parseMyShop(arr):
	arr2 = []
	for i in arr:
		arr2.append(myShop(i))
	return arr2
	
def parseAll(arr):

	s = []
	
	s.append({'res' : parseGlobus(arr),'s' : 'Biblio-Globus'})
	s.append({'res' : parseMyShop(arr),'s' : 'My-Shop'})
	s.append({'res' : parseDeltabook(arr),'s' : 'Deltabook'})
	s.append({'res' : parseShopRelod(arr),'s' : 'Shop-Relod'})

	counts = []
	counts.append(getCount(s[0]))
	counts.append(getCount(s[1]))
	counts.append(getCount(s[2]))
	counts.append(getCount(s[3]))

	prices = []

	prices.append(getPrice(s[0])+90)
	prices.append(getPrice(s[1])+79)
	prices.append(getPrice(s[2])+300)
	prices.append(getPrice(s[3])+290)

	l = insertion_sort(counts,prices,s)
	l[0] = list(reversed(l[0]))
	l[1] = list(reversed(l[1]))
	return l
	
def insertion_sort(c,p,s):  
	
	for i in range(1, len(c)):
		c_to_insert = c[i]
		p_to_insert = p[i]
		s_to_insert = s[i]

		j = i - 1
	  
		while j >= 0 and (c[j] > c_to_insert or (c[j] == c_to_insert and p[j] < p_to_insert)):		  
			c[j + 1] = c[j]
			p[j + 1] = p[j]
			s[j + 1] = s[j]
			j -= 1
		
		c[j + 1] = c_to_insert
		p[j + 1] = p_to_insert
		s[j + 1] = s_to_insert

	l = []
	l.append(s)
	l.append(p)
	return l

def getCount(arr):
	count = 0
	res = arr["res"]
	for i in res:
		if (i != None):
			count+=1
	return count

def getPrice(arr):
	price = 0
	res = arr["res"]
	for i in res:
		if (i != None):
			price+=i["price"]
	return price



  
pool = ProcessPoolExecutor()

def startParsing(arr,t):

	c = 0
	
	r = parseAll(arr)
	prices = r[1]
	r = r[0]
	t.insert(INSERT, 'Результаты:\n')
	counts = []
	counts.append(getCount(r[0]))
	counts.append(getCount(r[1]))
	counts.append(getCount(r[2]))
	counts.append(getCount(r[3]))
	for i in range(0,len(counts)):
		if counts[i] > 0:
			c+=1
			t.insert(INSERT, r[i]['s']+'\n')
			res = r[i]['res']
			for j in res:
				s = j['name']
				s = s+' : '
				s = s+str(j['price'])
				s = s+' руб\n'
				t.insert(INSERT, s)
			t.insert(INSERT, 'Итоговая цена с доставкой: '+str(prices[i])+' руб'+'\n\n')
	if (c==0):
		t.insert(INSERT, 'Ничего не найдено:\n')

def Search(ev) :
	textbox1.delete('1.0', 'end')
	text = textbox.get('1.0', 'end')
	if (text == '\n'):
		textbox1.insert(INSERT, 'Вы не ввели ни одной книги.\n')
	else:
		text = text.split('\n')
		arr = []
		for i in text:
			book = None
			book = i.strip().split('\"')
			pos = i.strip().find('\"')
			if (pos > -1):
				if (i == 0):
					arrEl = {'name' : book[0],'author' : book[1]}
					arr.append(arrEl)
				else:
					arrEl = {'name' : book[1],'author' : book[0]}
					arr.append(arrEl)
		if (len(arr) == 0):
			textbox1.insert(INSERT, 'Пожалуйста,введите книги корректно.\n')
		else:
			startParsing(arr,textbox1)
			

def Quit(ev):
global root
root.destroy()

root = Tk()
root.geometry("600x400")
panelFrame = Frame(root, height = 60, bg = 'gray')
textFrame = Frame(root, height = 340, width = 600)

panelFrame.pack(side = 'top', fill = 'x')
textFrame.pack(side = 'bottom', fill = 'both', expand = 1)

textbox = Text(textFrame, font='Arial 12', wrap='word')
scrollbar = Scrollbar(textFrame)

scrollbar['command'] = textbox.yview
textbox['yscrollcommand'] = scrollbar.set

textbox.place(x=10,y=10,width = 250, height = 300)
scrollbar.place(x=260,y=10,width=10,height = 300)

textbox1 = Text(textFrame, font='Arial 12', wrap='word')
scrollbar1 = Scrollbar(textFrame)

scrollbar1['command'] = textbox1.yview
textbox1['yscrollcommand'] = scrollbar1.set

textbox1.place(x=300,y=10,width = 250, height = 300)
scrollbar1.place(x=550,y=10,width=10,height = 300)

loadBtn = Button(panelFrame, text = 'Искать')
quitBtn = Button(panelFrame, text = 'Выход')

loadBtn.bind("<Button-1>", Search)
quitBtn.bind("<Button-1>", Quit)

lbl = Label(panelFrame,text="Вводите книги по одной в каждой строке в двойных кавычках\nТакже можно вводить автора на одной строке с книго без кавычек")
lbl.place(x=150,y=10,width=500, height=40)
loadBtn.place(x = 10, y = 10, width = 60, height = 40)
quitBtn.place(x = 80, y = 10, width = 60, height = 40)

root.mainloop()
